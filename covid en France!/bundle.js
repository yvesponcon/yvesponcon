(function (d3$1) {
  'use strict';

  const svg = d3$1.select('svg');
  const colordomain = [0,200000];
  const exposantcolor= 0.5;
  const colorrange=['#ffffff','#850309'];

  var projection = d3.geoMercator()
      .center([3, 47])                // GPS of location to zoom on
      .scale(1800)                       // This is like the zoom
      .translate([ 960/2, 450/2 ]);
  const pathGenerator = d3$1.geoPath().projection(projection);

  svg.append('path')
      .attr('class', 'sphere')
      .attr('d', pathGenerator({type: 'sphere'}));
      
  var data = d3$1.map();
  //var colorScale = scaleThreshold()
  //  .domain([0, 50000])
  //  .range(d3.schemeReds[3]);

   var color = d3.scalePow()
   				.exponent(exposantcolor)
  				.domain( colordomain)
          .range(colorrange);



  Promise.all([
    d3$1.csv( "covidtot.csv", function(d) { data.set( d.dep, +d.hosp); }),
    d3$1.json("json.json")
  ]).then(([csvdata,topo]) => {
      svg.selectAll('path').data(topo.features)
        .enter().append('path')
          .attr('class', 'dep')
          .attr('d', pathGenerator)
   			   
       .attr("fill", function (d) {
          d.total = data.get(d.properties.code) || 0;
          return (color(d.total))}) 
     //   return console.log(d.total)})
       .append('title')
    				.text(function (d) {
           d.total = data.get(d.properties.code);
          return  d.properties.nom + " : " + d.total });

  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7bWFwLG1heCwgc2VsZWN0LCBqc29uLHNjYWxlUG93LCBnZW9QYXRoLGNzdiwgc2NhbGVUaHJlc2hvbGQgfSBmcm9tICdkMyc7XG5jb25zdCBzdmcgPSBzZWxlY3QoJ3N2ZycpO1xuY29uc3QgY29sb3Jkb21haW4gPSBbMCwyMDAwMDBdXG5jb25zdCBleHBvc2FudGNvbG9yPSAwLjVcbmNvbnN0IGNvbG9ycmFuZ2U9WycjZmZmZmZmJywnIzg1MDMwOSddXG5cbnZhciBwcm9qZWN0aW9uID0gZDMuZ2VvTWVyY2F0b3IoKVxuICAgIC5jZW50ZXIoWzMsIDQ3XSkgICAgICAgICAgICAgICAgLy8gR1BTIG9mIGxvY2F0aW9uIHRvIHpvb20gb25cbiAgICAuc2NhbGUoMTgwMCkgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgbGlrZSB0aGUgem9vbVxuICAgIC50cmFuc2xhdGUoWyA5NjAvMiwgNDUwLzIgXSlcbmNvbnN0IHBhdGhHZW5lcmF0b3IgPSBnZW9QYXRoKCkucHJvamVjdGlvbihwcm9qZWN0aW9uKTtcblxuc3ZnLmFwcGVuZCgncGF0aCcpXG4gICAgLmF0dHIoJ2NsYXNzJywgJ3NwaGVyZScpXG4gICAgLmF0dHIoJ2QnLCBwYXRoR2VuZXJhdG9yKHt0eXBlOiAnc3BoZXJlJ30pKVxuICAgIFxudmFyIGRhdGEgPSBtYXAoKTtcbi8vdmFyIGNvbG9yU2NhbGUgPSBzY2FsZVRocmVzaG9sZCgpXG4vLyAgLmRvbWFpbihbMCwgNTAwMDBdKVxuLy8gIC5yYW5nZShkMy5zY2hlbWVSZWRzWzNdKTtcblxuIHZhciBjb2xvciA9IGQzLnNjYWxlUG93KClcbiBcdFx0XHRcdC5leHBvbmVudChleHBvc2FudGNvbG9yKVxuXHRcdFx0XHQuZG9tYWluKCBjb2xvcmRvbWFpbilcbiAgICAgICAgLnJhbmdlKGNvbG9ycmFuZ2UpO1xuXG5cblxuUHJvbWlzZS5hbGwoW1xuICBjc3YoIFwiY292aWR0b3QuY3N2XCIsIGZ1bmN0aW9uKGQpIHsgZGF0YS5zZXQoIGQuZGVwLCArZC5ob3NwKTsgfSksXG4gIGpzb24oXCJqc29uLmpzb25cIilcbl0pLnRoZW4oKFtjc3ZkYXRhLHRvcG9dKSA9PiB7XG4gXG4gXG4gIFxuICBjb25zdCBob3NwID0gZGF0YVxuICAgIHN2Zy5zZWxlY3RBbGwoJ3BhdGgnKS5kYXRhKHRvcG8uZmVhdHVyZXMpXG4gICAgICAuZW50ZXIoKS5hcHBlbmQoJ3BhdGgnKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnZGVwJylcbiAgICAgICAgLmF0dHIoJ2QnLCBwYXRoR2VuZXJhdG9yKVxuIFx0XHRcdCAgIFxuICAgICAuYXR0cihcImZpbGxcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgZC50b3RhbCA9IGRhdGEuZ2V0KGQucHJvcGVydGllcy5jb2RlKSB8fCAwO1xuICAgICAgICByZXR1cm4gKGNvbG9yKGQudG90YWwpKX0pIFxuICAgLy8gICByZXR1cm4gY29uc29sZS5sb2coZC50b3RhbCl9KVxuICAgICAuYXBwZW5kKCd0aXRsZScpXG4gIFx0XHRcdFx0LnRleHQoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgIGQudG90YWwgPSBkYXRhLmdldChkLnByb3BlcnRpZXMuY29kZSk7XG4gICAgICAgIHJldHVybiAgZC5wcm9wZXJ0aWVzLm5vbSArIFwiIDogXCIgKyBkLnRvdGFsIH0pO1xuICAgIDtcblxufSlcbiAgIl0sIm5hbWVzIjpbInNlbGVjdCIsImdlb1BhdGgiLCJtYXAiLCJjc3YiLCJqc29uIl0sIm1hcHBpbmdzIjoiOzs7RUFDQSxNQUFNLEdBQUcsR0FBR0EsV0FBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0VBQzFCLE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQztFQUM5QixNQUFNLGFBQWEsRUFBRSxJQUFHO0VBQ3hCLE1BQU0sVUFBVSxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBQztBQUN0QztFQUNB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